language: cpp
branches:
  only:
  - master
  - /^v\d+\.\d+(\.\d+)?(-\S*)?$/
  - /^travis.*$/
#  except:
#  - /^v\d+\.\d+\.\d+(\.\d+)?(-\S*)?$/  # minor versions like v0.3.1 excluded
cache:
  timeout: 1000
  ccache: true
  directories:
  - depends/built
  - depends/work/build
  - depends/sdk-sources
#  - $TRAVIS_BUILD_DIR/depends/$HOST
env:
  global:
  - MAKEJOBS="-j3"
  - GLOBAL_CONFIG="--enable-reduce-exports"
stages:
  - build
  - compile
jobs:
  include:
  - stage: build
    name: Warming the cache for Win64 on Bionic
    dist: bionic
    addons:
      apt:
        sources:
        - deadsnakes
        - sourceline: 'ppa:bitcoin/bitcoin'      
        packages:
        - build-essential 
        - libtool 
        - autotools-dev 
        - automake 
        - pkg-config 
        - libssl-dev 
        - libevent-dev 
        - bsdmainutils 
        - python3 
        - libboost-system-dev 
        - libboost-filesystem-dev 
        - libboost-chrono-dev 
        - libboost-test-dev 
        - libboost-thread-dev
# Additional
        - libdb4.8-dev 
        - libdb4.8++-dev 
        - libminiupnpc-dev 
        - libzmq3-dev 
        - libqt5gui5 
        - libqt5core5a 
        - libqt5dbus5 
        - qttools5-dev 
        - qttools5-dev-tools 
        - libprotobuf-dev 
        - protobuf-compiler 
        - libqrencode-dev 
        - libboost-program-options-dev
# Win64
        - g++-mingw-w64-x86-64
    env:
#    - BUILD_CONFIG="--enable-zmq --with-gui=qt5 --with-miniupnpc --enable-upnp-default LDFLAGS=-Wa,-mbig-obj"
    - BUILD_CONFIG="--with-gui=qt5 LDFLAGS=-Wa,-mbig-obj"
    - LABEL=win64
    - HOST=x86_64-w64-mingw32
    before_install:
    - echo 1 | sudo update-alternatives --config x86_64-w64-mingw32-g++;  
    install:
    #
    before_script:
    - PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g'); 
    script:
    - set -o errexit; make $MAKEJOBS -C depends HOST="$HOST";           
    os: linux
  - stage: compile
    name: Linux x86 64 Bit on Bionic
    dist: bionic
    before_deploy:
#    - cd $TRAVIS_BUILD_DIR/src; ls -lh;
    - mkdir $TRAVIS_BUILD_DIR/deploy
    - cp $TRAVIS_BUILD_DIR/src/cryptocrowd-cli $TRAVIS_BUILD_DIR/src/cryptocrowd-tx $TRAVIS_BUILD_DIR/src/cryptocrowdd $TRAVIS_BUILD_DIR/src/qt/cryptocrowd-qt $TRAVIS_BUILD_DIR/src/cryptocrowd-wallet $TRAVIS_BUILD_DIR/src/cryptocrowd-hash $TRAVIS_BUILD_DIR/deploy; strip $TRAVIS_BUILD_DIR/deploy/*; 
#    - cp $TRAVIS_BUILD_DIR/src/cryptocrowd-cli $TRAVIS_BUILD_DIR/src/cryptocrowd-tx $TRAVIS_BUILD_DIR/src/cryptocrowdd $TRAVIS_BUILD_DIR/src/qt/cryptocrowd-qt $TRAVIS_BUILD_DIR/deploy; strip $TRAVIS_BUILD_DIR/deploy/*; 
    - cd $TRAVIS_BUILD_DIR/deploy
    - ls -lh;
#    - if [[ "$LABEL" == "linux64" ]]; then tar -zvcf cryptocrowd-bin-${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-$LABEL.tar.gz *; fi
    - zip -P "$DEVPW" cryptocrowd-bin-${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-$LABEL.zip *; 
#    - if [[ "$LABEL" == "win64" ]]; then zip -P "$DEVPW" cryptocrowd-bin-${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-$LABEL.zip *; fi
    deploy:
      provider: releases
      token: $GH_TOKEN
      file_glob: true
      file: $TRAVIS_BUILD_DIR/deploy/cryptocrowd-bin*
      overwrite: true
      skip_cleanup: true
      draft: true
      name: ${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-${LABEL}
      tag_name: ${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-${LABEL}
      on:
        repo: cryptocrowd-city/xcrc-core-wallet
        all_branches: true
    addons:
      apt:
        sources:
        - deadsnakes
        - sourceline: 'ppa:bitcoin/bitcoin'
        packages:
        - build-essential 
        - libtool 
        - autotools-dev 
        - automake 
        - pkg-config 
        - libssl-dev 
        - libevent-dev 
        - bsdmainutils 
        - python3 
        - libboost-system-dev 
        - libboost-filesystem-dev 
        - libboost-chrono-dev 
        - libboost-test-dev 
        - libboost-thread-dev
#
        - libdb4.8-dev 
        - libdb4.8++-dev 
        - libminiupnpc-dev 
        - libzmq3-dev 
        - libqt5gui5 
        - libqt5core5a 
        - libqt5dbus5 
        - qttools5-dev 
        - qttools5-dev-tools 
        - libprotobuf-dev 
        - protobuf-compiler 
        - libqrencode-dev 
        - libboost-program-options-dev
    env:
#    - BUILD_CONFIG="--enable-zmq --with-gui=qt5 --with-miniupnpc --enable-upnp-default CPPFLAGS=-DDEBUG_LOCKORDER"
    - BUILD_CONFIG="--enable-zmq --enable-glibc-back-compat --with-gui=qt5 LDFLAGS=-static-libstdc++ CPPFLAGS=-DDEBUG_LOCKORDER"
    - LABEL=linux64
    - PYZMQ=true
    os: linux
  - stage: compile
    name: Win x86 64 Bit on Bionic
    dist: bionic
    before_deploy:
#    - cd $TRAVIS_BUILD_DIR/src; ls -lh;
    - mkdir $TRAVIS_BUILD_DIR/deploy
#    - cp $TRAVIS_BUILD_DIR/src/cryptocrowd-cli.exe $TRAVIS_BUILD_DIR/src/cryptocrowd-tx.exe $TRAVIS_BUILD_DIR/src/cryptocrowdd.exe $TRAVIS_BUILD_DIR/src/qt/cryptocrowd-qt.exe $TRAVIS_BUILD_DIR/src/qt/cryptocrowd-wallet.exe $TRAVIS_BUILD_DIR/deploy; strip $TRAVIS_BUILD_DIR/deploy/*; 
    - cp $TRAVIS_BUILD_DIR/src/cryptocrowd*.exe $TRAVIS_BUILD_DIR/src/qt/cryptocrowd-qt.exe $TRAVIS_BUILD_DIR/deploy; strip $TRAVIS_BUILD_DIR/deploy/*; 
    - cd $TRAVIS_BUILD_DIR/deploy
    - ls -lh;
#    - if [[ "$LABEL" == "linux64" ]]; then tar -zvcf cryptocrowd-bin-${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-$LABEL.tar.gz *; fi
#    - if [[ "$LABEL" == "win32" ]]; then zip -P "$DEVPW" cryptocrowd-bin-${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-$LABEL.zip *; fi
    - zip -P "$DEVPW" cryptocrowd-bin-${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-$LABEL.zip *; 
    deploy:
      provider: releases
      token: $GH_TOKEN
      file_glob: true
      file: $TRAVIS_BUILD_DIR/deploy/cryptocrowd-bin*
      overwrite: true
      skip_cleanup: true
      draft: true
      name: ${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-${LABEL}
      tag_name: ${TRAVIS_BRANCH}.${TRAVIS_BUILD_NUMBER}-${LABEL}
      on:
        repo: cryptocrowd-city/xcrc-core-wallet
        all_branches: true
    addons:
      apt:
        sources:
        - deadsnakes
        - sourceline: 'ppa:bitcoin/bitcoin'      
        packages:
        - build-essential 
        - libtool 
        - autotools-dev 
        - automake 
        - pkg-config 
        - libssl-dev 
        - libevent-dev 
        - bsdmainutils 
        - python3 
        - libboost-system-dev 
        - libboost-filesystem-dev 
        - libboost-chrono-dev 
        - libboost-test-dev 
        - libboost-thread-dev
# Additional
        - libdb4.8-dev 
        - libdb4.8++-dev 
        - libminiupnpc-dev 
        - libzmq3-dev 
        - libqt5gui5 
        - libqt5core5a 
        - libqt5dbus5 
        - qttools5-dev 
        - qttools5-dev-tools 
        - libprotobuf-dev 
        - protobuf-compiler 
        - libqrencode-dev 
        - libboost-program-options-dev
# Win64
        - g++-mingw-w64-x86-64
    env:
#    - BUILD_CONFIG="--enable-zmq --with-gui=qt5 --with-miniupnpc --enable-upnp-default LDFLAGS=-Wa,-mbig-obj"
    - BUILD_CONFIG="--with-gui=qt5 LDFLAGS=-Wa,-mbig-obj"
    - LABEL=win64
    - HOST=x86_64-w64-mingw32
    os: linux
before_install:
#- sudo apt-get upgrade -y --allow-unauthenticated; 
- if [[ "$LABEL" == "win32" ]]; then  sudo dpkg --add-architecture i386; fi
- if [[ "$TRAVIS_DIST" == "bionic" ]] && [[ "$HOST" == "i686-w64-mingw32" ]]; then echo 1 | sudo update-alternatives --config i686-w64-mingw32-g++; fi # echo 1 | sudo update-alternatives --config x86_64-w64-mingw32-gcc; fi
- if [[ "$TRAVIS_DIST" == "bionic" ]] && [[ "$HOST" == "x86_64-w64-mingw32" ]]; then echo 1 | sudo update-alternatives --config x86_64-w64-mingw32-g++; fi # echo 1 | sudo update-alternatives --config x86_64-w64-mingw32-gcc; fi
install:
- if [ "$PYZMQ" = "true" ]; then pip install pyzmq --user ; fi
before_script:
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then unset CC CXX DISPLAY; fi
- if [[ "$LABEL" == "win32" ]]; then PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g'); fi
- if [[ "$LABEL" == "win64" ]]; then PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g'); fi
script:
- set -o errexit; if [[ "$LABEL" == "win32" ]]; then make $MAKEJOBS -C depends HOST="$HOST"; fi
- set -o errexit; if [[ "$LABEL" == "win64" ]]; then make $MAKEJOBS -C depends HOST="$HOST"; fi
- set -o errexit; if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then ./autogen.sh; fi
- set -o errexit; if [[ "$LABEL" == "linux64" ]]; then ./configure $GLOBAL_CONFIG $BUILD_CONFIG; fi
- set -o errexit; if [[ "$LABEL" == "win32" ]]; then CONFIG_SITE=$PWD/depends/i686-w64-mingw32/share/config.site ./configure --prefix=/; fi
- set -o errexit; if [[ "$LABEL" == "win64" ]]; then CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/; fi
- set -o errexit; if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then make $MAKEJOBS; fi
after_script:
- set -o errexit; python3 $TRAVIS_BUILD_DIR/test/functional/cryptocrowd_premine.py; 
